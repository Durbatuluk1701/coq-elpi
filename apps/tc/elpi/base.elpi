% [count L X R] counts the occurrences of X in L
pred count i:list A, i:A, o:int.
count [] _ 0.
count [A | TL] A R :- count TL A X, R is (X + 1).
count [_ | TL] A R :- count TL A R.

% [find L F R] returns the first R in L such that (F R) is valid
pred find i:list A, i:(A -> prop), o:A.
find [] _ _ :- std.fatal-error "find element not found".
find [R | _] F R :- F R.
find [_ | L] F R :- find L F R.

pred find-opt i:list A, i:(A -> prop), o:(option A).
find-opt [] _ none.
find-opt [R | _] F (some R) :- F R.
find-opt [_ | L] F R :- find-opt L F R.

pred for-loop i:int, i:int, i:(int -> prop).
for-loop A A _.
for-loop A B _ :- A > B, std.fatal-error "first param should be smaller then the sencond one".
for-loop A B F :- F A, for-loop {calc (A + 1)} B F.

pred for-loop0 i:int, i:(int -> prop).
for-loop0 B F :- for-loop 0 B F.

pred args->str-list i:list argument, o: list string.
args->str-list L Res :-
  std.map L (x\r\ str r = x) Res.

% returns the TC from the type of an instance.
% Eg. 
% if the type if id_inj is 
% ∀ `A` _ c0 \ app [Inj, c0, c0, eq c0, eq c0, id c0]
% then it returns Inj
pred get-TC-of-inst-type i:term, o:gref.
get-TC-of-inst-type (prod _ _ A) GR:-
  pi x\ get-TC-of-inst-type (A x) GR.
get-TC-of-inst-type (app [global TC | _]) TC.

pred is-instance-gr i:gref.
is-instance-gr GR :-
  coq.env.typeof GR Ty,
  is-instance-term Ty.

pred is-instance-term i:term.
is-instance-term T :-
  get-TC-of-inst-type T TC,
  coq.TC.class? TC.

% adds a clause to the tc.db DB at the passed grafting
pred add-tc-db o:id, o:grafting, i:prop.  
add-tc-db HookName Graft PR :-
  coq.elpi.accumulate _ "tc.db" 
    (clause HookName Graft PR).

% takes a tc-instance and return the gref of the inst
pred inst->gref i:tc-instance, o:gref.
inst->gref (tc-instance Res _) Res.

% returns all the instances of the passed ClassName
pred get-inst-by-tc-name i:gref, o:list gref.
get-inst-by-tc-name TC GRL:-
  coq.TC.db-for TC Inst,
  std.map Inst inst->gref GRL.

pred app-has-class i:term.
app-has-class (prod _ _ T) :- pi x\ app-has-class (T x).
app-has-class (app [global T|_]) :- coq.TC.class? T. 

% input (∀ a, b, c ... => app [A, B, ..., Last])
% returns Last 
pred get-last i:term, o:term.
get-last (prod _ _ Bo) R :-
  pi x\ get-last (Bo x) R.
get-last (app L) R :-
  std.last L R.

% takes the type of the goal of the current theorem,
% the instance associated to the goal and the list of hypothesis
% of the clause. Returns the new clause. 
pred make-tc i:term, i:term, i:list prop, o:prop.
make-tc Ty Inst Hyp Clause :-
  app [global TC | _] = Ty,
  % get-last Ty InstFun,
  % if (Hyp = []) 
  %   (Clause = (tc TC InstFun Ty Inst))
  %   (Clause = (tc TC InstFun Ty Inst :- Hyp)).
  % Clause = (pi x\ tc TC x Ty Inst :- Hyp).
  if (Hyp = [])
    (Clause = (tc TC Ty Inst))
    (Clause = (tc TC Ty Inst :- Hyp)).


% returns the priority of an instance from the gref of an instance
pred get-inst-prio i:gref, o:int.
get-inst-prio InstGr Prio :-
  coq.env.typeof InstGr InstTy,
  get-TC-of-inst-type InstTy TC,
  find-opt {coq.TC.db-for TC} 
    (x\ tc-instance InstGr Prio = x) (some _).
get-inst-prio _ 0.