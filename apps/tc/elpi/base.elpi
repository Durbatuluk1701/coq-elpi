pred get-TC-of-inst-type i:term, o:gref.
get-TC-of-inst-type (prod _ _ A) GR:-
  pi x\ get-TC-of-inst-type (A x) GR.
get-TC-of-inst-type (app [global TC | _]) TC.

pred is-instance i:gref.
is-instance GR :-
  coq.env.typeof GR Ty,
  is-instance Ty.

pred is-instance i:term.
is-instance T :-
  get-TC-of-inst-type T TC,
  coq.TC.class? TC.

pred add-tc-db o:grafting, i:prop.  
add-tc-db Graft PR :-
  coq.elpi.accumulate _ "tc.db" 
    (clause _ Graft PR).

% takes a tc-instance and return the gref
pred inst->gref i:tc-instance, o:gref.
inst->gref (tc-instance Res _) Res.

% returns all the instances of the passed ClassName
pred get-inst-by-tc-name i:gref, o:list gref.
get-inst-by-tc-name TC GRL:-
  coq.TC.db-for TC Inst,
  std.map Inst inst->gref GRL.

pred app-has-class i:term.
app-has-class (app [global T|_]) :- coq.TC.class? T. 