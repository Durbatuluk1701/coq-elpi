kind enum type.
type path  string -> string -> enum.
type tcOrInst list string -> enum.
type ignoreInstances, ignoreClasses  string -> list string -> enum.

pred parse i:list argument, o:enum.
parse [str ClassName, str "path", str Path] (path ClassName Path).
parse [str ClassName, str "ignoreInstances" | InstNames] (ignoreInstances ClassName Res) :-
  args->str-list InstNames Res.
parse [str ClassName, str "ignoreClasses" | ClassNames] (ignoreClasses ClassName Res) :-
  args->str-list ClassNames Res.
parse ClassNames (tcOrInst Res) :- args->str-list ClassNames Res.

pred run-command i:enum.
:if "debug"
run-command A :- coq.say A, fail.
run-command (ignoreClasses ClassName IgnoreClasses) :- 
  add-tc-or-inst IgnoreClasses [] [ClassName].
run-command (tcOrInst InstNames) :- 
  add-tc-or-inst [] [] InstNames.
run-command (path ClassName Path):- 
  add-path ClassName Path.
run-command (ignoreInstances ClassName InstNames):- 
  add-tc-or-inst [] InstNames [ClassName].

% The main of the Command
main Arguments :- parse Arguments Res, run-command Res.