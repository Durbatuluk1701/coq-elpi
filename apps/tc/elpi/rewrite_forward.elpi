pred rewrite-forward->list i:term, i:name, i:prop, o:list prop.
rewrite-forward->list P N (forward _ Lemma RewL)  L :-
  coq.mk-app Lemma [P] LemmaApp,
  std.map RewL (x\r\ sigma ProjL Ty Pr\
    pr ProjL Ty = x,
    make-proj-app ProjL LemmaApp Pr,
    r = decl Pr N Ty) L.

pred rewrite-forward i:prop, o:list prop.
rewrite-forward (decl P N Ty) L :-
  std.findall (forward Ty _ _) FwdL,
  std.map FwdL (rewrite-forward->list P N) RewFdw,
  std.flatten RewFdw L.
rewrite-forward _ [].

pred make-proj-app i:list term, i:term, o:term.
make-proj-app [A | As] B (app [A, _, _, T]) :-
  make-proj-app As B T.
make-proj-app [] B B.

pred rec-split-and i:term, i:(list term), o:list (pair (list term) term).
rec-split-and {{lp:A /\ lp:B}} DL L :-
  LEFT = [{{proj1}} | DL],
  RIGHT = [{{proj2}} | DL],
  rec-split-and A LEFT AL, 
  rec-split-and B RIGHT BL,
  std.append AL BL L. 
rec-split-and A P [pr P A].

pred compile-rewrite i:term, i:term, i:list term, o:prop.
compile-rewrite (prod _ Ty Bo) Lemma L (pi x\ forward Ty LemmaApp (TL x)) :-
  pi x\ 
    coq.mk-app Lemma {std.rev L} LemmaApp,
    (Bo x) = {{_ /\ _}},
    rec-split-and (Bo x) [] (TL x).
compile-rewrite (prod _ _ Bo) Lemma L (pi x\ C x) :-
  pi x\ compile-rewrite (Bo x) Lemma [x | L] (C x).
  
% TODO: @FissoreD @gares should make a set in output?
pred rewrite-dep i:list prop, o:list prop.
rewrite-dep [] [].
rewrite-dep [A | B] L :-
  rewrite-forward A NewA, not (NewA = []),
  std.append NewA B ToTreat,
  rewrite-dep ToTreat L.
rewrite-dep [A | TL] [A | L] :- rewrite-dep TL L.