msolve L N :- !,
    std.rev L LR, coq.ltac.all (coq.ltac.open solve) LR N.

pred solve1 i:goal, o:(list sealed-goal).
solve1 (goal Ctx _ Ty Sol _ as G) GL :-
  var Sol,
  % Add's the section's definition to the current context
  % in order to add its TC if present
  std.map {coq.env.section} (x\r\ sigma F\ coq.env.typeof (const x) F, r = (decl (global (const x)) _ F)) SectionCtx,
  ctx->clause {std.append Ctx SectionCtx} Clauses,
  get-last Ty InstFun,
  Ty = app [global TC | _],
  Clauses => if (std.spy-do![], tc TC InstFun Ty X) 
    (
      refine X G GL ; 
      coq.say "illtyped solution:" {coq.term->string X}
    ) 
    (GL = [seal G]).

:if "solve-print-goal"
solve (goal Ctx _ Ty _ _) _ :-
  coq.say "Ctx" Ctx "Ty" Ty, fail.
:if "solve-print-type"
solve (goal _ _ Ty _ _) _ :-
  coq.say "Ty" Ty, fail.
:if "solve-trace-time"
solve A B :- !,
  std.spy-do! [std.time (solve1 A B) Time, coq.say Time].
:if "solve-trace"
solve A B :- !,
  std.spy-do! [solve1 A B].
:if "solve-time"
solve A B :- !,
  std.time (solve1 A B) Time, coq.say Time.
solve A B :-solve1 A B.