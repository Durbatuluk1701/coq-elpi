msolve L N :- !,
    std.rev L LR, coq.ltac.all (coq.ltac.open solve) LR N.

% Takes a goal and check if Ty is a (prod _ Ty Cnt)
% In this case, we should add Ty to the context 
% This is the case of an Instance having some premises 
% Eg: 
% ----------------------------------------
% Global Instance prod_equivalence :
%   Equivalence (equiv A) → 
%   Equivalence (equiv B) → 
%   Equivalence (equiv (A * B)) := _. 
% ----------------------------------------
% In this Instance we should take into account the 
% Equivalnce relation on A and B
pred solve1 i:goal, i:list term, o:(list sealed-goal).
solve1 (goal Ctx A (prod _N Cnt Ty) Sol B) L GL :-
  pi x\ sigma NewDecl Len NN Name\
  int_to_string {std.length L} = Len,
  NN is "VARIABLE" ^ Len,
  coq.string->name NN Name,
  NewDecl = decl x Name Cnt,
  NewDecl => solve1 (goal [NewDecl | Ctx] A (Ty x) Sol B) [x | L] GL.
solve1 (goal Ctx _ Ty Sol _ as G) _L GL :-
  var Sol,
  % Add's the section's definition to the current context
  % in order to add its TC if present
  std.map {coq.env.section} (x\r\ sigma F\ coq.env.typeof (const x) F, r = (decl (global (const x)) _ F)) SectionCtx,
  ctx->clause {std.append Ctx SectionCtx} Clauses,
  get-last Ty InstFun,
  Ty = app [global TC | _],
  % coq.say "_---------------------------------------------_",
  % coq.say "Ty" Ty,
  % coq.say "Clauses" Clauses,
  Clauses => if (std.spy-do![], tc TC InstFun Ty X) 
    (
      % coq.say "OK",
      % coq.say "X1" X "G" G "GL" GL,
      % @ppmost! => coq.say "AAAA" {coq.term->string X},
      % coq.say "L is" L,
      refine X G GL ; 
      coq.say "illtyped solution:" {coq.term->string X}
    ) 
    (GL = [seal G]).

% In order to have more or less verbosity, 
% we use the solve1 predicate to make TC resolution.
% The solve predicate is used to have different Debug behaviors.
:if "solve-print-goal"
solve (goal Ctx _ Ty _ _) _ :-
  coq.say "Ctx" Ctx "Ty" Ty, fail.
:if "solve-print-type"
solve (goal _ _ Ty _ _) _ :-
  coq.say "Ty" Ty, fail.
:if "solve-trace-time"
solve A B :- !,
  std.spy-do! [std.time (solve1 A [] B) Time, coq.say Time].
:if "solve-trace"
solve A B :- !,
  std.spy-do! [solve1 A [] B].
:if "solve-time"
solve A B :- !,
  std.time (solve1 A [] B) Time, coq.say Time.
solve A B :-solve1 A [] B.