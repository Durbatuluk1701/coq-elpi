msolve L N :- !,
    std.rev L LR, coq.ltac.all (coq.ltac.open solve) LR N.

pred my-refine i:term, i:goal, o:(list sealed-goal).
:if "time-refine"
my-refine T G GL :- !, std.time(refine.no_check T G GL) FF, coq.say "Refine Time" FF.
my-refine T G GL :- refine T G GL.

% pred tc-search-time i:gref, i:term, i:term, o:term.
% :if "time-tc"
% tc-search-time TC InstFun Ty X :- !,
%   std.time (tc TC InstFun Ty X) Time, coq.say "TC search" Time.
% tc-search-time TC InstFun Ty X :- tc TC InstFun Ty X.
pred tc-search-time i:term, o:term.
:if "time-tc"
tc-search-time Ty X :- !,
  std.time (tc Ty X) Time, coq.say "TC search" Time.
tc-search-time Ty X :- tc Ty X.

% Takes a goal and check if Ty is a (prod _ Ty Cnt)
% In this case, we should add Ty to the context 
% This is the case of an Instance having some premises 
% Eg: 
% ----------------------------------------
% Global Instance prod_equivalence :
%   Equivalence (equiv A) → 
%   Equivalence (equiv B) → 
%   Equivalence (equiv (A * B)) := _. 
% ----------------------------------------
% In this Instance we should take into account the 
% Equivalnce relation on A and B
pred solve1 i:goal, i:list term, o:(list sealed-goal).
solve1 (goal _ _ (prod N _ _) _ _ as G) _L GL :-
  refine (fun N _ _) G GL1,
  coq.ltac.all (coq.ltac.open solve) GL1 GL.
solve1 (goal Ctx _ Ty Sol _ as G) _L GL :-
  var Sol,
  % Add's the section's definition to the current context
  % in order to add its TC if present
  std.map {coq.env.section} (x\r\ sigma F\ coq.env.typeof (const x) F, r = (decl (global (const x)) _ F)) SectionCtx,
  ctx->clause {std.append Ctx SectionCtx} Clauses,
  % get-last Ty InstFun,
  % Ty = app [global TC | _],
  % coq.say "Clauses" Clauses,
  Clauses => if (tc-search-time Ty X) 
    (
      % @no-tc! => coq.elaborate-skeleton X _ X' ok,
      % coq.say "Solution " X "end" X' "caio",
      % std.assert! (ground_term X') "solution not complete",
      my-refine X G GL; 
      coq.say "illtyped solution:" {coq.term->string X}
    ) 
    (GL = [seal G]).

% In order to have more or less verbosity, 
% we use the solve1 predicate to make TC resolution.
% The solve predicate is used to have different Debug behaviors.
:if "solve-print-goal"
solve (goal Ctx _ Ty _ _) _ :-
  coq.say "Ctx" Ctx "Ty" Ty, fail.
:if "solve-print-type"
solve (goal _ _ Ty _ _) _ :-
  coq.say "Ty" Ty, fail.
:if "solve-trace-time"
solve A B :- !,
  std.spy-do! [std.time (solve1 A [] B) Time, coq.say Time].
:if "solve-trace"
solve A B :- !,
  std.spy-do! [solve1 A [] B].
:if "solve-time"
solve A B :- !,
  std.time (solve1 A [] B) Time, coq.say "Time Solve" Time.
solve A B :- solve1 A [] B.