pred find i:list A, i:(A -> prop), o:option A.
find [] _ none.
find [H|_] F (some H) :- F H.
find [_|T] F Res :- find T F Res.

pred find-def i:term, i:goal-ctx, o:prop.
find-def G Ctx Res :-
  find Ctx (x\ x = def G _ _ _) (some Res).

% if the term is a var, we seek in the context 
% its definition and return it.
% if the term is an application we return it
pred replace-vars i:term, i:goal-ctx, o:term.
replace-vars (sort _) _ _ :- !, fail.
replace-vars (app A) _ (app A).
replace-vars V Ctx Res :- 
  find-def V Ctx (def _ _ _ Res1),
  replace-vars Res1 Ctx Res.

pred debug-ctx->clause i:list prop.
:if "debug ctx->clause"
debug-ctx->clause LP :-
  coq.say "The clauses built from the context are:" LP, fail.
debug-ctx->clause _.

pred ctx->clause-aux i:goal-ctx, i:goal-ctx, o:list prop.
ctx->clause-aux _ [] [].
ctx->clause-aux Ctx [decl Ty _ S | CtxTl] [tc R Ty | ResTl] :-
  replace-vars S Ctx R,
  ctx->clause-aux Ctx CtxTl ResTl.
ctx->clause-aux Ctx [_ | Tl] L :- ctx->clause-aux Ctx Tl L.

pred ctx->clause i:goal-ctx, o:list prop.
ctx->clause Ctx Clauses :-
  ctx->clause-aux Ctx Ctx Clauses, 
  debug-ctx->clause Clauses.
