% returns the classes on which the current gref depends
pred get-sub-classes i:gref, o:list gref.
get-sub-classes GR Res :-
  coq.env.dependencies GR _ DepSet,
  coq.gref.set.elements DepSet DepList,
  std.filter DepList coq.TC.class? Res.

pred compile i:term, i:term, i:list prop, i:list term, o:prop.
compile (prod _ T F) I ListRHS ListVar (pi x\ C x) :-
  pi p\ sigma L\
    if (app-has-class T) (L = [tc T p | ListRHS]) (L = ListRHS),
    compile (F p) I L [p | ListVar] (C p).
compile Ty I ListRHS ListVar Clause :- 
  std.rev ListRHS RevRHS,
  AppInst = app [I | {std.rev ListVar}],
  Clause = (tc Ty AppInst :- RevRHS).

% [add-inst->db IgnoreClassDepL Inst] add the Inst to
% the database except those depending on at least one 
% inside IgnoreClassDepL
pred add-inst->db i:list gref, i:gref.
add-inst->db IgnoreClassDepL Inst :-
  get-sub-classes Inst Dep,
  if (not (instance _ Inst _), not (std.exists Dep (x\ std.mem IgnoreClassDepL x))) 
  (
    coq.env.typeof Inst Ty,
    coq.env.current-section-path SectionPath,
    if ({std.length Dep} > 1) (
      coq.warning "TC-warning" "add-inst-with-multiple-deps" 
      "Adding" Inst "which dependes on mulitple class dependencies:" Dep) 
      true,
    compile Ty (global Inst) [] [] C,
    add-tc-db (after "complexHook") C,
    get-TC-of-inst-type Ty TC-of-Inst,
    add-tc-db _ (instance SectionPath Inst TC-of-Inst)
  ) 
  true.

pred add-tc i:list gref, i:gref.
add-tc IgnoreDepClassGR GR:-
  add-modes GR, 
  get-inst-by-tc-name GR InstL,
  std.forall InstL (add-inst->db IgnoreDepClassGR).

pred is-instance-aux i:term.
is-instance-aux (prod _ _ A) :-
  pi x\ is-instance-aux (A x).
is-instance-aux (app [global TC | _]) :-
  coq.TC.class? TC,
  add-modes TC.

pred is-instance i:gref.
is-instance GR :-
  is-instance-aux {coq.env.typeof GR}.

% [add-tc-or-inst IgnoreDepClass ClassName] look
% for all the instances of ClassName and call the pred
% add-inst->db
pred add-tc-or-inst i:list string, i:list string.
add-tc-or-inst IgnoreDepClass Names :-
  std.map IgnoreDepClass coq.locate IgnoreDepClassGR,
  std.forall Names (n\ sigma GR\
    coq.locate n GR,
    if2 (coq.TC.class? GR) 
      (add-tc IgnoreDepClassGR GR)
      (is-instance GR)(add-inst->db IgnoreDepClassGR GR)
      (coq.warning "not-inst-tc" "not-inst-tc" n "is neither a TC nor a instance")
  ).

% takes a Path and a GR and returns if 
% the GR is located in Path
pred is-in-path i:string, i:gref. 
is-in-path Path GR :- 
  std.mem {coq.gref->path GR} Path.

% Look for the instances of ClassName 
% that are located in Path.
pred add-path i:string, i:string.
add-path ClassName Path :-
  coq.locate ClassName GR,
  std.filter {get-inst-by-tc-name GR} (is-in-path Path) InstInPath,
  std.forall InstInPath (add-inst->db []).