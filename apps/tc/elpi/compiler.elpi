% returns the classes on which the current gref depends
pred get-sub-classes i:gref, o:list gref.
get-sub-classes GR Res :-
  coq.env.dependencies GR _ DepSet,
  coq.gref.set.elements DepSet DepList,
  std.filter DepList coq.TC.class? Res.

% returns all the instances of the passed ClassName
pred get-inst-by-tc-name i:string, o:list gref.
get-inst-by-tc-name ClassName GRL:-
  coq.TC.db-for {coq.locate ClassName} Inst,
  std.map Inst inst->gref GRL.

% takes a tc-instance and return the gref
pred inst->gref i:tc-instance, o:gref.
inst->gref (tc-instance Res _) Res.

pred has-class i:term.
has-class (app [global T|_]) :- coq.TC.class? T. 

pred show-tc-test i:term.
:if "show-tc-test"
show-tc-test A :- coq.say "TC pass through" A, fail.
show-tc-test _.


pred compile i:term, i:term, i:list prop, i:list term, o:prop.
compile (prod _ T F) I ListRHS ListVar (pi x\ C x) :-
  pi p\ sigma L\
    if (has-class T) (L = [tc T p | ListRHS]) (L = ListRHS),
    compile (F p) I L [p | ListVar] (C p).
compile Ty I ListRHS ListVar (tc Ty AppInst :- [show-tc-test AppInst | RevRHS]) :- 
  AppInst = app [I | {std.rev ListVar}],
  std.rev ListRHS RevRHS.

pred make-clause i:gref, o:clause.
make-clause Inst Clause :-
  coq.env.typeof Inst Ty,
  compile Ty (global Inst) [] [] C,
  Clause = clause _ (before "complexHook") C.

pred debud-add-instance i:A.
:if "add instance"
debud-add-instance Inst :- coq.say "Adding instance:" Inst, fail.
debud-add-instance _.

% [add-inst->db IgnoreClassDepL Inst] add the Inst to
% the database except those depending on at least one 
% inside IgnoreClassDepL
pred add-inst->db i:list gref, i:gref.
add-inst->db IgnoreClassDepL Inst :-
  get-sub-classes Inst Dep,
  if (not (instance Inst), not (std.exists Dep (x\ std.mem IgnoreClassDepL x))) 
  (
    if ({std.length Dep} > 1) (
      coq.warning "TC-warning" "add-inst-with-multiple-deps" 
      "Adding" Inst "which dependes on mulitple class dependencies:" Dep) 
      true,
    coq.elpi.accumulate _ "tc.db" {make-clause Inst},
    coq.elpi.accumulate _ "tc.db" (clause _ _ (instance Inst)),
    debud-add-instance InstInPath
  ) 
  true.

% [add-class-instances IgnoreDepClass ClassName] look
% for all the instances of ClassName and call the pred
% add-inst->db
pred add-class-instances i:list string, i:string.
add-class-instances IgnoreDepClass ClassName :-
  add-modes ClassName,
  get-inst-by-tc-name ClassName InstL,
  std.forall InstL (add-inst->db {std.map IgnoreDepClass coq.locate}).

% takes a Path and a GR and returns if 
% the GR is located in Path
pred is-in-path i:string, i:gref. 
is-in-path Path GR :- 
  std.mem {coq.gref->path GR} Path.

% Look for the instances of ClassName 
% that are located in Path.
pred add-path i:string, i:string.
add-path ClassName Path :-
  std.filter {get-inst-by-tc-name ClassName} (is-in-path Path) InstInPath,
  std.forall InstInPath (add-inst->db []).

pred destruct-ctx i:prop, o:term.
destruct-ctx (decl _ _ E) E.