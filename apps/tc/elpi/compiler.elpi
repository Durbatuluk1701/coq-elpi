% returns the classes on which the current gref depends
pred get-sub-classes i:gref, o:list gref.
get-sub-classes GR Res :-
  coq.env.dependencies GR _ DepSet,
  coq.gref.set.elements DepSet DepList,
  std.filter DepList coq.TC.class? Res.

% takes a type of an isntance, the instance and two empty lists.
% returns a new tc clause corresponding to the current instance.
% note that every quantified variable V should be quantified with
% pi variables and if V contains an instance assumption,
% then V should be added to the hypothesis of the final clause.
pred compile i:term, i:term, i:list prop, i:list term, o:prop.
compile (prod _ T F) I ListRHS ListVar (pi x\ C x) :-
  pi p cond\ sigma Clause L\ 
  % decl cond _ T => 
    if (app-has-class T) (compile T p [] [] Clause, L = [Clause | ListRHS]) (L = ListRHS),
    compile (F p) I L [p | ListVar] (C p).
compile Ty I ListRHS ListVar Clause :- 
  std.rev ListRHS RevRHS,
  coq.mk-app I {std.rev ListVar} AppInst,
  make-tc Ty AppInst RevRHS Clause.

% if an instance depends on multiple TC then a warning is raised.
pred warn-multiple-deps i:gref, i:list gref.
warn-multiple-deps Inst Dep :-
  if (fail, {std.length Dep} > 1) (
    coq.warning "add-inst-with-multiple-deps"  "TC-warning"
    "Adding" Inst "which dependes on mulitple class dependencies:" Dep) 
    true.

pred has-context-deps i:gref.
has-context-deps GR :-
  coq.env.section SectionVars,
  coq.env.dependencies GR _ Deps, 
  std.exists SectionVars (x\ coq.gref.set.mem (const x) Deps).

% [add-inst->db IgnoreClassDepL Inst] add the Inst to
% the database except those depending on at least one 
% inside IgnoreClassDepL
pred add-inst->db i:list gref, i:bool, i:gref.
add-inst->db IgnoreClassDepL ForceAdd Inst :-
  coq.env.current-section-path SectionPath,
  get-sub-classes Inst Dep,
  if ((ForceAdd = tt; not (instance _ Inst _)), 
    not (std.exists Dep (std.mem IgnoreClassDepL))) 
  (
    coq.env.typeof Inst Ty,
    % TODO: HERE WE IGNORE THE PGLOBAL INST 
    if (get-TC-of-inst-type Ty TC-of-Inst) (
      warn-multiple-deps Inst Dep,
      compile Ty (global Inst) [] [] C,
      add-tc-db (after "leafHook") C,
      if (has-context-deps Inst) 
        (@local! => add-tc-db _ (instance SectionPath Inst TC-of-Inst)) 
        (add-tc-db _ (instance [] Inst TC-of-Inst))) true
  ) 
  true.

pred add-tc i:list gref, i:list gref, i:gref.
add-tc IgnoreDepClassGR IgnoreInstsGR GR:-
  add-modes GR, 
  get-inst-by-tc-name GR InstL,
  std.filter InstL (x\ not (std.mem IgnoreInstsGR x)) InstLF,
  std.forall InstLF (add-inst->db IgnoreDepClassGR ff).

pred add-tc-or-inst-gr i:list string, i:list string, i:list gref.
add-tc-or-inst-gr IgnoreDepClass IgnoreInsts Names :-
  std.map IgnoreDepClass coq.locate IgnoreDepClassGR,
  std.map IgnoreInsts coq.locate IgnoreInstsGR,
  std.forall Names (GR\
    if2 (coq.TC.class? GR)(add-tc IgnoreDepClassGR IgnoreInstsGR GR)
        (is-instance-gr GR)(add-inst->db IgnoreDepClassGR ff GR)
        (coq.warning "not-inst-nor-tc" "TC-warning" GR "is neither a TC nor a instance")
  ).

% [add-tc-or-inst IgnoreDepClass ClassName] look
% for all the instances of ClassName and call the pred
% add-inst->db
pred add-tc-or-inst i:list string, i:list string, i:list string.
add-tc-or-inst IgnoreDepClass IgnoreInsts Names :-
  std.map Names coq.locate L,
  add-tc-or-inst-gr IgnoreDepClass IgnoreInsts L.

% takes a Path and a GR and returns if 
% the GR is located in Path
pred is-in-path i:string, i:gref. 
is-in-path Path GR :- 
  std.mem {coq.gref->path GR} Path.

% Look for the instances of ClassName 
% that are located in Path.
pred add-path i:string, i:string.
add-path ClassName Path :-
  coq.locate ClassName GR,
  std.filter {get-inst-by-tc-name GR} (is-in-path Path) InstInPath,
  std.forall InstInPath (add-inst->db [] ff).