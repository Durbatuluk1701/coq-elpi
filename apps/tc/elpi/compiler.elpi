/* license: GNU Lesser General Public License Version 2.1 or later           */
/* ------------------------------------------------------------------------- */

accumulate base.
accumulate tc_aux.

% returns the classes on which the current gref depends
pred get-class-dependencies i:gref, o:list gref.
get-class-dependencies GR Res :-
  coq.env.dependencies GR _ DepSet,
  coq.gref.set.elements DepSet DepList,
  std.filter DepList coq.TC.class? Res.


/*
[compile-aux-preprocess InstType InstTerm UnivL UnivInstL Clause] is in charge
of turning universe levels and instances into rule parameters, i.e. it
puts in Clause a pi x\ for each UnivL and UnivInstL, then calls compile-aux.

InstType   : the type of the current instance
InstTerm   : the term corresponding to the current instance
UnivL      : the list of universal variable to be replaced with elpi fresh variables
UnivInstL  : the list of universal instances to be replaced with elpi fresh variables
Clause     : the clause corresponding to the current instace
*/
pred compile-aux-preprocess i:term, i:term, i:list univ, i:list univ-instance, o:prop.
compile-aux-preprocess InstType InstTerm [] [] Clause :-
  copy InstType InstType', !,
  compile-aux tt InstType' InstTerm [] [] Clause.
compile-aux-preprocess InstType InstTerm [Univ | UnivL] UnivInstL (pi x\ Clause x) :-
  pi x\ copy (sort (typ Univ)) (sort (typ x)) => 
    compile-aux-preprocess InstType InstTerm UnivL UnivInstL (Clause x).
compile-aux-preprocess InstType InstTerm [] [UnivInst | UnivInstL] (pi x\ Clause x) :-
  pi x\ copy (pglobal A UnivInst) (pglobal A x) => 
    compile-aux-preprocess InstType InstTerm [] UnivInstL (Clause x).

/*
[compile-aux InstType InstTerm Premises PiAccRev IsPositive Clause]

IsPositive  : bring the information about the positivity of the current sub-term
              e.g. if T = A -> (B -> C) -> D, then:
              D is positive in T, (B -> C) is negative, A is positive in T
              C is positivie in (B -> C), B is negative in (B -> C)
              IsPositive is used to know how to accumulate sigma Xi\ and pi x\ in the 
              current clause 
InstType    : the type of the instance
InstTerm    : the term corresponding to the current instance
Premises    : list of constraints/premises of an instances found from its type
PiAccRev    : the list of pi variables accumulated from the (prod _ _ Bo) of the 
              type of Inst. The will be used on the solution of the clause
              coq.mk-app Inst {std.rev PiAccRev} Sol
Clause      : the solution to be returned
*/
pred compile-aux i:bool, i:term, i:term, i:list prop, i:list term, o:prop.
:name "compiler-aux:start"
compile-aux IsPositive (prod N T F) I RevPremises ListVar Clause :- !,
  std.do![
    ho-cleanup T Tc,
    if (IsPositive = tt) 
      (Clause = (pi x\ C x), E = x\[]) 
      (Clause = (pi x\ decl x N Tc => C x), E = x\[locally-bound x]),
    pi p\ decl p N Tc => E p => 
      compile-aux-premise IsPositive p T (F p) I RevPremises ListVar (C p)].
compile-aux IsPositive Ty I RevPremises ListVar Clause :-
  std.do![    
    coq.mk-app I {std.rev ListVar} AppInst,
    ho-preprocess AppInst AppInst2 HOPremises1,
    ho-preprocess Ty TyX HOPremises,
    compile-aux-conclusion IsPositive TyX AppInst2 HOPremises HOPremises1 RevPremises Clause,
  ].

pred compile-aux-conclusion i:bool, i:term, i:term, i:list prop, i:list prop, i:list prop, o:prop.
compile-aux-conclusion tt Conclusion Solution HOPremisesIn HOPremisesOut RevPremises Clause :-
  std.append {std.append HOPremisesIn {std.rev RevPremises}} HOPremisesOut Premises,
  make-tc Conclusion Solution Premises tt Clause.
compile-aux-conclusion ff Conclusion Solution HOPremisesIn HOPremisesOut RevPremises Clause :- 
  make-tc Conclusion Solution {std.rev RevPremises} ff Clause1, 
  std.append {std.append HOPremisesIn [Clause1]} HOPremisesOut Premises,
  Clause = do Premises.

pred compile-aux-premise i:bool, i:term, i:term, i:term, i:term, i:list prop, i:list term, o:prop.
% HO case
compile-aux-premise IsPositive P (prod _ _ _ as T) ITy I RevPremises ListVar C :- get-TC-of-inst-type T TC, !,
  count-occurrences ITy P ITy' N,
  M is N + 1, % this is for the solution, P
  under-ho-twins-call (compile-premise-then-aux T (ho-var P N) TC IsPositive ITy' I RevPremises [P | ListVar]) M P T C.
compile-aux-premise IsPositive P (prod _ _ _ as T) ITy I RevPremises ListVar C :- !,
  % functional parameters *may* require one extra variable for either
  % pattern fragment unification or first order heuristic
  count-occurrences ITy P ITy' N,
  under-ho-twins-call (compile-aux IsPositive ITy' I RevPremises [P | ListVar]) N P T C.
% FO case
compile-aux-premise IsPositive P T ITy I RevPremises ListVar C :- get-TC-of-inst-type T TC, !,
  compile-premise-then-aux T P TC IsPositive ITy I RevPremises [P | ListVar] C.
compile-aux-premise IsPositive P _ ITy I RevPremises ListVar C :-
  compile-aux IsPositive ITy I RevPremises [P | ListVar] C.

pred compile-premise-then-aux i:term, i:term, i:gref, i:bool, i:term, i:term, i:list prop, i:list term, o:prop.
compile-premise-then-aux PremiseT PremiseI TC IsPositive Ty I RevPremises ListVar Clause :-
  compile-aux {neg IsPositive} PremiseT PremiseI [] [] NewPremise,
  if (class TC _ deterministic _) 
    (NewPremise' = do-once NewPremise)
    (NewPremise' = NewPremise),
  compile-aux IsPositive Ty I [NewPremise'|RevPremises] ListVar Clause.

pred under-ho-twins-call i:(prop -> prop), i:int, i:term, i:term, o:prop.
under-ho-twins-call K 0 _ _ C :- !, K C.
under-ho-twins-call K N P T (pi x y\ C x y) :- N > 0, !, 
  ho-cleanup T Tc,
  N1 is N - 1, pi x y\ ho-twin P N1 x y Tc => under-ho-twins-call K N1 P T (C x y).

% build a list of Clauses of type tc to be temporarly added to the 
% database, used in theorems having assumptions.
pred compile-ctx i:goal-ctx, o:list prop.
compile-ctx [] [].
compile-ctx [X | Xs] [Clause | ResTl] :-
  (decl Var _ Ty = X; def Var _ Ty _ = X),
  std.do![
    is-instance-term Ty,
    compile-ty Ty Var _ Clause,
    compile-ctx Xs ResTl].
compile-ctx [_ | Tl] L :- compile-ctx Tl L.

pred get-univ-instances i:term, o:list univ-instance.
get-univ-instances T L :-
  (pi x L\ fold-map (pglobal _ x) L _ [x | L]) => fold-map T [] _ L.

pred get-univ i:term, o:list univ.
get-univ T L :-
  coq.univ.variable.set.elements {coq.univ.variable.of-term T} Vars,
  std.map Vars (x\r\ coq.univ.variable r x) L.

pred compile-ty i:term, i:term, o:gref, o:prop.
compile-ty TyRaw Inst TC-of-Inst Clause:-
  std.do![
    normalize-ty TyRaw Ty,
    get-TC-of-inst-type Ty TC-of-Inst,
    @redflags! coq.redflags.beta => coq.reduction.lazy.norm Ty Ty1, 
    get-univ Ty1 UnivConstL,
    get-univ-instances Ty1 UnivInstL,
    compile-aux-preprocess Ty1 Inst UnivConstL UnivInstL Clause].

pred compile i:gref, o:gref, o:prop.
compile InstGR TC-of-Inst Clause:-
  coq.env.typeof InstGR Ty,
  compile-ty Ty (global InstGR) TC-of-Inst Clause.

pred has-context-deps i:gref.
has-context-deps GR :-
  coq.env.section SectionVars,
  coq.env.dependencies GR _ Deps, 
  std.exists SectionVars (x\ coq.gref.set.mem (const x) Deps).

pred get-locality i:string, o:list prop.
get-locality "Local" [@local!].
get-locality _ [@local!] :- coq.env.current-section-path [_ | _].
get-locality "Global" [@global!].
get-locality "Export" [].

pred add-inst.aux i:gref, i:gref i:list prop, i:grafting.
add-inst.aux Inst TC Locality Grafting :-
  coq.env.current-section-path SectionPath,
  compile Inst TC Clause, 
  get-full-path Inst ClauseName,
  Locality => (
    add-tc-db ClauseName Grafting Clause, 
    add-tc-db _ Grafting (instance SectionPath Inst TC)).
add-inst.aux Inst _ _ _ :- 
  @global! => add-tc-db _ _ (banned Inst),
  coq.error "Not-added" "TC_solver" "[TC] Not yet able to compile" Inst "...".

pred add-inst i:gref, i:gref, i:string, i:int.
add-inst Inst TC LocalityStr Prio :-
  get-locality LocalityStr Locality,
  if (Prio = -1) (get-inst-prio Inst Prio1) (Prio1 = Prio),
  Grafting is after (int_to_string Prio1),
  add-inst.aux Inst TC Locality Grafting.

pred is-local.
is-local :- std.mem {attributes} (attribute "local" _).

pred add-inst>db.aux i:gref.
add-inst>db.aux Inst :-
  get-inst-prio Inst Prio,
  get-TC-of-inst-type {coq.env.typeof Inst} TC,
  % Note: this is an approximation of instance locality when added with 
  %       TC.AddAllInstances or TC.AddInstances InstName
  if (is-local; has-context-deps Inst) 
    (LocalityStr = "Local") 
    (LocalityStr = "Global"),
  add-inst Inst TC LocalityStr Prio.

% [add-inst->db IgnoreClassDepL ForceAdd Inst] compiles and add the Inst to
% the database if the instance is not banned or if it does not depend on a TC
% inside the list IgnoreClassDepL.
pred add-inst->db i:list gref, i:bool, i:gref.
add-inst->db _ tt Inst :- !, add-inst>db.aux Inst.
add-inst->db _ _ Inst :- 
  banned Inst, !, (coq.warning "banned-inst" "TC-warning" Inst "is banned").
add-inst->db _ _ Inst :- instance _ Inst _, !. % the instance has already been added
add-inst->db IgnoreClassDepL _ Inst :-
  get-class-dependencies Inst Dep,
  std.exists Dep (std.mem IgnoreClassDepL), !,
  coq.warning "invalid-dependency-inst" "TC-warning" Inst "depneds on a banned TC".
add-inst->db _ _ Inst :- !, add-inst>db.aux Inst.

% add all the instances of a TC
pred add-inst-of-tc i:list gref, i:list gref, i:gref.
add-inst-of-tc IgnoreDepClassGR IgnoreInstsGR GR:-
  get-inst-by-tc-name GR InstL,
  std.filter InstL (x\ not (std.mem IgnoreInstsGR x)) InstLF,
  std.forall InstLF (add-inst->db IgnoreDepClassGR ff).

pred add-tc-or-inst-gr i:list string, i:list string, i:list gref.
add-tc-or-inst-gr IgnoreDepClass IgnoreInsts Names :-
  std.map IgnoreDepClass coq.locate IgnoreDepClassGR,
  std.map IgnoreInsts coq.locate IgnoreInstsGR,
  std.forall Names (GR\
    if2 (coq.TC.class? GR)(add-inst-of-tc IgnoreDepClassGR IgnoreInstsGR GR)
        (is-instance-gr GR)(add-inst->db IgnoreDepClassGR ff GR)
        (coq.warning "not-inst-nor-tc" "TC-warning" GR "is neither a TC nor a instance")
  ).

% [remove-inst GR] remove an instance from the DB by replacing it with `dummy`
pred remove-inst i:gref.
remove-inst InstGR :- 
  get-full-path InstGR ClauseName,
  remove-clause ClauseName.

pred is-in-path i:string, i:gref. 
is-in-path Path GR :- 
  std.mem {coq.gref->path GR} Path.

% [add-path ClassName Path] adds only the instances from a given path name
pred add-path i:string, i:string.
add-path ClassName Path :-
  coq.locate ClassName GR,
  std.filter {get-inst-by-tc-name GR} (is-in-path Path) InstInPath,
  std.forall InstInPath (add-inst->db [] ff).

namespace class-coercion {
  kind task type.
  type add task.
  type remove task.

  pred do-task i:task, i:gref.
  do-task add GR :- add-inst->db [] tt GR.
  do-task remove GR :- remove-inst GR.

  pred loop-proj i:task, i:list argument.
  loop-proj _ [].
  loop-proj Task [str Proj | TL] :- 
    coq.locate Proj GRProj, existing-instance GRProj, !,
    do-task Task GRProj,
    loop-proj Task TL.
  loop-proj Task [_|TL] :- loop-proj Task TL.
  
}